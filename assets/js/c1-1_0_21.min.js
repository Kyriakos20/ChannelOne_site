//test
console.log('C1');

Array.prototype.lastItem = function() {
    return this[this.length-1];
};

$.notify.defaults({
    globalPosition:'top left'
});


C1 = {
    base_url : document.getElementById('base_url').value,

    api_url:function () {
        var ret = this.base_url;
        switch(this.base_url)
        {
            case 'http://localhost:3000/':
                ret = 'http://localhost:8080/';
                break;
            case 'https://localhost:3000/':
                ret = 'https://localhost:8080/';
                break;
            case 'http://channelone.work/':
                ret = 'http://channelone.work:8080/';
                break;
            case 'https://channelone.work/':
                ret = 'https://channelone.work:8080/';
                break;

        }
        return ret;
    },
    showLoader:function(){
        console.log('loader');
        document.getElementById('loader').style.display = 'block';
    },
    hideLoader:function(){
        document.getElementById('loader').style.display = 'none';
    },
    systemError:function(){
        alert('System Error');
    },
    setMenu:function (which) {
        $('#main-nav').children('li').removeClass('active');
        $('li[data-link="'+which+'"]').addClass('active');
    },
    page:{
        search:{
            filter:{},
            sortField:'owner.primary.name.last',
            sortDir:'',
            leads:[]
        },
        leads:{
            leads:[],
            meta:{},
            filters:{}
        }
    },
    /*
     define('EVOLVE_USERNAME', 'ga-0001010097@voip.evolveip.net');
     define('EVOLVE_PASSWORD', '$79vn337t7qH6Q^Q6Hq7t723nv97$');
     define('EVOLVE_URL', 'https://ews2.voip.evolveip.net');
     */
    evolve:{
        username:'ga-0001010097@voip.evolveip.net',
        password:'$79vn337t7qH6Q^Q6Hq7t723nv97$',
        url:'https://ews2.voip.evolveip.net',
        cleanPhone:function (number) {
            return number.replace(/-|\.|_/g,'');
        },
        
        call:function (user,number) {
            var number = parseInt(C1.evolve.cleanPhone(number));
            var userNum = parseInt('1'+C1.evolve.cleanPhone(user.phones.desk));

            /*
            var request = require('request');
            request.post({
                url:"/com.broadsoft.xsi-actions/v2.0/user/"+userNum+"/calls/new?address="+number,
                form:{
                    username:C1.evolve.username,
                    password:C1.evolve.password
                }
            }, function (err, resp, body) {
                $log.log
            });
            */
        }
    }
};

var c1App = angular.module('c1App',['ngRoute','ngCookies','checklist-model','ui-rangeSlider','720kb.datepicker']);

c1App.config(function($routeProvider){
    $routeProvider
        .when('/', {
            templateUrl:'templates/home.html',
            controller:'HomeController as cntrl'
        }).when('/search', {
            templateUrl:'templates/search.html',
            controller:'SearchController as cntrl'
        }).when('/leads', {
            templateUrl:'templates/leads.html',
            controller:'LeadsController as cntrl'
        }).when('/pipeline', {
            templateUrl:'templates/pipeline.html',
            controller:'PipelineController as cntrl'
        }).when('/admin/dashboard', {
            templateUrl:'templates/admin/dashboard.html',
            controller:'AdminDashboardController as cntrl'
        }).when('/admin/leads', {
            templateUrl:'templates/admin/leads.html',
            controller:'AdminLeadsController as cntrl'
        }).when('/admin/users', {
            templateUrl:'templates/admin/users.html',
            controller:'AdminUsersController as cntrl'
        }).when('/admin/teams', {
            templateUrl:'templates/admin/teams.html',
            controller:'AdminTeamsController as cntrl'
        }).when('/admin/reports/property-breakdown', {
            templateUrl:'templates/admin/reports/property-breakdown.html',
            controller:'AdminReportsPropBDController as cntrl'
        }).otherwise({redirectTo : '/'})
});

c1App.filter('countyTxt',['$filter', function($filter){
    return function(val){
        if(val)
        {
            return val.replace(' County','');
        } else {
            return 'No Name';
        }
    };
}]);

c1App.filter('formatBorrower',['$filter', function($filter){
    return function(item){
        if(item)
        {
           nm = [];
            if(item.first)
            {
                nm.push(item.first);
            }
            if(item.middle)
            {
                nm.push(item.middle);
            }
            if(item.last)
            {
                nm.push(item.last);
            }
            if(item.suffix)
            {
                nm.push(item.suffix);
            }
            var nm_stng = nm.join(' ');
            return nm_stng;
        } else {
            return '';
        }

    };
}]);

c1App.filter('formatDate',['$filter', function($filter){
    return function(item){
        if(item)
        {
            return moment(item).format('MM/DD/YY');
        }
    };
}]);

c1App.filter('formatDateTime',['$filter', function($filter){
    return function(item){
        if(item)
        {
            return moment(item).format('MM/DD/YY h:m A');
        }
    };
}]);

c1App.filter('formatPhone',['$filter', function($filter){
    return function(item){
        if(item)
        {
            var n = item.replace(/\D/g,"");
            return n.replace(/(\d{3})(\d{3})(\d{4})/, '$1-$2-$3');
        }
    };
}]);

c1App.filter('formatWPName',['$filter', function($filter){
    return function(item){
        if(item)
        {
            var n = '';
            if(item.salutation)
            {
                n = n+item.salutation+' ';
            }
            if(item.first_name)
            {
                n = n+item.first_name+' ';
            }
            if(item.middle_name)
            {
                n = n+item.middle_name+' ';
            }
            if(item.last_name)
            {
                n = n+item.last_name+' ';
            }
            if(item.suffix)
            {
                n = n+item.suffix+' ';
            }
            return n;
        } else {
            return '';
        }

    };
}]);

c1App.filter('getAgeDays',['$filter', function($filter){
    return function(item){
        if(item)
        {
            return round((new Date() - item)/86400000);
        } else {
            return '';
        }
    };
}]);

c1App.filter('piplLink',['$filter', function($filter){
    return function(prop){
        if(!prop)
        {
            return '';
        }
        var link = "https://pipl.com";
        if(prop.owner.primary)
        {
            var item = prop.owner.primary.name;
            nm = [];
            if(item.first)
            {
                nm.push(item.first);
            }
            if(item.middle)
            {
                nm.push(item.middle);
            }
            if(item.last)
            {
                nm.push(item.last);
            }
            if(item.suffix)
            {
                nm.push(item.suffix);
            }
            var nm_stng = nm.join('+');

            link = "https://pipl.com/search/?q="+nm_stng+"&l="+prop.address.city+"%2C+"+prop.address.state+"&sloc=US%7CDE%7C"+prop.address.city+"&in=6";
        }

        return link;
    };
}]);

c1App.filter('preferWhitePages',['$filter', function($filter){
    return function(val){
        return val.status == 'Good'
    };
}]);

c1App.filter('recentZillow',['$filter', function($filter){
    return function(vals){
        if(vals)
        {
            var val = null;

            for(var i = 0; i < vals.length; i++)
            {
                if(vals[i].source == 'Zillow')
                {
                    val = vals[i].value;
                }
            }
            return val;
        } else {
            return null;
        }
    };
}]);

c1App.filter('toMinutes',['$filter', function($filter){
    return function(item){
        return (Number(item)/1000/60).toFixed();
    };
}]);

c1App.factory('AuthService', ['$rootScope','$log','$cookies','$http', function ($rootScope, $log, $cookies,$http) {
    return {
        token:null,
        user:null,
        isAdmin:false,
        teamMembers:[],
        refreshUser:function (user) {
            this.user = user;
            $cookies.putObject('c1Auth', {token:this.token,user:this.user,teamMembers:this.teamMembers},{
                path:'/'
            });
        },
        loggedIn:function () {
            var auth = $cookies.getObject('c1Auth');
            if(!this.token && !auth)
            {
                window.location.href = C1.base_url+'login';
            } else {
                this.token = auth.token;
                this.user = auth.user;
                this.teamMembers = auth.teamMembers;
                if(['Web Admin','Admin','Sales Manager'].indexOf(this.user.role) >= 0)
                {
                    this.isAdmin = true;
                }
                $rootScope.$broadcast('Logged In');
            }

        },
        logIn:function(user, teamMembers, token)
        {

            this.token = token;
            this.user = user;
            //var filts = user.filters;
            //this.user.filters = [];
            this.teamMembers = teamMembers;

            if(['Web Admin','Admin','Sales Manager'].indexOf(this.user.role) >= 0)
            {
                this.isAdmin = true;
            }
            $cookies.putObject('c1Auth', {token:token,user:user,teamMembers:teamMembers},{
                path:'/'
            });
            window.location.href = C1.base_url;

        },
        logOut:function()
        {

            var auth = $cookies.getObject('c1Auth');

            if(this.token || auth) {
                $cookies.remove('c1Auth');

                this.user = null;
                this.token = null;
                window.location.href = C1.base_url+'login';
                $rootScope.$broadcast('Logged Out');
            }
        }
    };
}]);

c1App.service('ClosedModalService',['$rootScope', function($rootScope){

    this.lead = null;
    this.closed = null;

    return {
        setLead:function (l) {
            this.lead = l;
            $rootScope.$broadcast('closed-loan-data-ready');
        },
        getLead:function () {
            return this.lead;
        },
        getClosed:function () {
            return this.closed;
        },
        setClosed: function (s) {
          this.closed = s;
          $rootScope.$broadcast('lead-with-closed-ready');
        }
    }
}]);

c1App.service('DetailModalService',['$rootScope','$log', function($rootScope,$log){

    this.lead = null;

    return {
        setLead:function (l) {
            this.lead = l;
            $rootScope.$broadcast('detail-data-ready');
        },
        getLead:function () {
            return this.lead;
        },
        updateLead:function (l, props) {
            for(var i = 0; i<props.length;i++)
            {
                $log.log(props[i]);
                this.lead[props[i]] = l[props[i]];
            }
        }
        
    }
}]);

c1App.factory('DialDataService', ['$rootScope','$log','$cookies','$http', function ($rootScope, $log, $cookies,$http) {
    return {
        lead:{},
        getPhones: function () {
            return this.lead.phones;
        },
        getAddress:function () {
            return this.lead.address.street1+', '+this.lead.address.city+', '+this.lead.address.state+' '+this.lead.address.zip;
        },
        getBorrowers:function () {
            return this.lead.owner.primary.name.first+' '+this.lead.owner.primary.name.last;
        },
        setLead:function (lead) {
            this.lead = lead;
            $rootScope.$broadcast('dial-data-ready');
        }
    };
}]);

c1App.service('DocsOutService',['$rootScope', function($rootScope){

    this.lead = null;

    return {
        setLead:function (l) {
            this.lead = l;
            $rootScope.$broadcast('docs-out-data-ready');
        },
        getLead:function () {
            return this.lead;
        }
    }
}]);

c1App.service('EditPropService',['$rootScope', function($rootScope){

    this.lead = null;

    return {
        setLead:function (l) {
            this.lead = l;
            $rootScope.$broadcast('edit-prop-data-ready');
        },
        getLead:function () {
            return this.lead;
        },
        setNewLead: function (l) {
          this.lead = l;
          $rootScope.$broadcast('new-prop-data-ready');
        }
    }
}]);

c1App.service('HelperService',['$rootScope', function($rootScope){

    this.viewUser = null;

    return {
        states: function () {
            return ['AL','AZ', 'CA', 'CO','CT', 'DC', 'DE', 'FL', 'GA','ID', 'IL', 'IN','KY', 'LA','MD', 'ME','MI','MT','NC','NE','NH', 'NJ','NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA','RI', 'SC','TN', 'TX', 'VA', 'WA'];
        },
        loan_types: function () {
            return ['Fixed', 'Adjustable', 'Both'];
        },
        dnc_options: function () {
            return ['No DNC or DNM', 'No DNC', 'No DNM', 'Only DNC', 'Only DNM', 'Only DNC and DNM'];
        },
        lead_buckets: function () {
            return ['Leads', 'Completed Apps', 'Working', 'Processing', 'Closed', 'Manager Review'];
        },
        lead_statuses: function () {
            return ['Lead', 'Paper App', 'Work Up', 'Ready to Pitch', 'Booked', 'Docs Out',
                'Docs In', 'Counselling In', 'Case Num Orderded', 'Appraisal Ordered', 'Appraisal In',
                'Submitted to Processing', 'Sent to Lender', 'Stipped', 'Clear to Close', 'Closed'];
        },
        tud_statuses: function () {
            return ['Did not like offer', 'Did not need the money', 'Did not want the hassle', 'Lost contact', 'Not enough money', 'Sat too long'];
        },
        wtd_statuses: function () {
            return ['Balance too high', 'Borrower died', 'Bad credit', 'Home damage', 'Invalid phone', 'Low income', 'Value is low', 'Closed recently'];
        },
        roles: function () {
            return ['Web Admin', 'Admin', 'Sales Manager', 'Team Manager', 'Loan Officer', 'Assistant'];
        },
        sources: function () {
            return ['Self/Referral', 'Personal Mailer', 'Dialer', 'Corporate Mailer', 'Cold Call', 'Other'];
        },
        indexTypes: function () {
            return ["CMT/TCM", "T-Bill", "MTA/MAT", "CODI", "COFI", "COSI", "LIBOR", "CD", "Prime"];
        },
        counties: null,
        users: null,
        userFilters: null,
        setViewUser: function (u) {
            this.viewUser = u;
            $rootScope.$broadcast('view-user-ready');
        },
        getViewUser: function () {
            return this.viewUser;
        }
    }
}]);

c1App.service('SourceModalService',['$rootScope', function($rootScope){

    this.lead = null;
    this.source = null;

    return {
        setLead:function (l) {
            this.lead = l;
            $rootScope.$broadcast('lead-source-data-ready');
        },
        getLead:function () {
            return this.lead;
        },
        getSource:function () {
            return this.source;
        },
        setSource: function (s) {
          this.source = s;
          $rootScope.$broadcast('lead-with-source-ready');
        }
    }
}]);

c1App.service('TakeAppService',['$rootScope', function($rootScope){

    this.lead = null;
    this.app = null;

    return {
        setLead:function (l) {
            this.lead = l;
            $rootScope.$broadcast('take-app-data-ready');
        },
        getLead:function () {
            return this.lead;
        },
        setApp:function (l) {
            this.app = l;
        },
        getApp:function () {
            return this.app;
        }
    }
}]);

c1App.controller('AdminDashboardController', ['$scope','$http','$log','AuthService', 'DetailModalService', function ($scope, $http, $log, AuthService, DetailModalService) {


    $log.log('AdminDashboardController');

    var that = this;
    that.callTotals = [];
    that.centerTotals = [];
    that.dogHouse = [];
    var timer = null;
    var timer2 = null;

    that.showDetail = function (lead) {
        $http.post(C1.api_url()+'api?action=getProperty', {id:lead._id, t:AuthService.token}).success(function(data) {
            DetailModalService.setLead(data.property);
        }).error(function(err) {
            sweetAlert('Error loading property', 'error');
        });
    };

    that.recycle = function (lead) {
        $http.post(C1.api_url()+'api?action=recycleProperty', {id:lead._id, user:AuthService.user, t:AuthService.token}).success(function(data) {
            var dog = that.dogHouse.findIndex(function (o) {
                return o._id = lead._id;
            });
            that.dogHouse.splice(dog, 1);
            $.notify("Recycled", "success");
        }).error(function(err) {
            sweetAlert('Error loading property', 'error');
        });
    };

    $scope.$on('detail-lead-turned-down', function () {
        var lead = DetailModalService.getLead();
        var dog = that.dogHouse.findIndex(function (o) {
            return o._id = lead._id;
        });
        that.dogHouse.splice(dog, 1);
    });


    function initTimer() {
        if(!timer)
        {
            getCallTotals();
            timer = setInterval(function () {
                getCallTotals();
            }, 90000);
        }

        if(!timer2)
        {
            getCenterTotals();
            timer2 = setInterval(function () {
                getCenterTotals();
            }, 90000);
        }
    };

    function getDogHouse() {
        $http.get(C1.api_url()+'api?action=doghouseAged').success(function(data) {
            $log.log('doghouse received');
            that.dogHouse = data.properties;
        }).error(function(err) {
            sweetAlert('Unable to load aged leads', 'error');
        });
    };

    function getPropertyStats() {

        $http.get(C1.api_url()+'api?action=basicPropertyStats').success(function(data) {
            var ctx = $('#lead-dist-chart');
            var labels = [];
            var vals = [];
            data.stats.map(function (o) {
                labels.push(o._id.bucket);
                vals.push(o.count);
            });
            // console.log(labels);
            // console.log(vals);
            var bpChart = new Chart(ctx, {
                type:"doughnut",
                data:{
                    labels:labels,
                    datasets:[{
                        data:vals,
                        backgroundColor:[
                            '#C0392B',
                            '#9B59B6',
                            '#2980B9',
                            '#1ABC9C',
                            '#27AE60',
                            '#F1C40F',
                            '#E67E22',
                            '#E74C3C',
                            '#8E44AD',
                            '#3498DB',
                            '#16A085',
                            '#2ECC71',
                            '#F39C12',
                            '#D35400'
                        ]
                    }]
                },
                options:{}
            });
        }).error(function(err) {
            sweetAlert('Unable to load lead distribution', 'error');
        }).then(function () {
            getDogHouse();
            initTimer();
        });

    };

    function getCenterTotals() {
        $http.post(C1.api_url()+'api?action=getCenterTotals', {t:AuthService.token}).success(function(data) {
            $log.log('center totals received');
            that.centerTotals = data.results;
        }).error(function(err) {
            sweetAlert('Unable to load user call center data', 'error');
        });
    };

    function getCallTotals() {
        $http.post(C1.api_url()+'api?action=getCallTotals2', {t:AuthService.token}).success(function(data) {
            $log.log('call totals received');
            that.callTotals = data.results;
        }).error(function(err) {
            sweetAlert('Unable to load call totals', 'error');
        });
    };

    $scope.$on('$destroy', function () {
        clearInterval(timer);
        timer = null;
        clearInterval(timer2);
        timer2 = null;
    });

    $scope.$on('Logged In', function (event, data) {
        $log.log('Logged In');
        C1.hideLoader();
        C1.setMenu('admin');
        getPropertyStats();
    });

    AuthService.loggedIn();
}]);

c1App.controller('AdminLeadsController', ['$scope','$http','$log','AuthService','HelperService',
    'DetailModalService','DialDataService', function ($scope, $http, $log, AuthService,HelperService, DetailModalService,DialDataService) {

    $log.log('AdminLeadsController');

    var that = this;
    that.selectedProps = [];
    that.assignModal = {};
    that.states = [];
    that.buckets = [];
    that.statuses = [];
    that.leads = [];
    that.meta = {
        pages:0,
        page:1,
        perPage:25
    };
    that.filters = {};
    var defaultFilters = {
        page:1,
        perPage:25,
        sortOn:'owner.primary.name.last',
        sortDir:'asc',
        states:[],
        counties:{},
        loanType:'Both',
        closingDate:{
            start:'1/1/1975',
            end:moment().format('M/D/YYYY')
        },
        mtgAmount:{
            min:0,
            max:2500000
        },
        prevValue:{
            min:0,
            max:2500000
        },
        zestimate:{
            min:0,
            max:2500000
        },
        equity:{
            min:0,
            max:1000000
        },
        equityPercent:{
            min:0,
            max:1000
        },
        onlyPhones:'No',
        doNot:'none',
        pipelineStatuses:[],
        firstTime: 'Hecm'
    };

    that.refreshLeads = function() {
        $log.log('refresh Leads');
        that.page = 1;
        fetchLeads();
    };
    
    that.pageStart = function() {
        that.filters.page = 1;
        fetchLeads();
    };

    that.pageEnd = function() {
        that.filters.page = that.meta.totalPages;
        fetchLeads();
    };

    that.pageNext = function() {
        that.filters.page = that.meta.page + 1;
        fetchLeads();
    };

    that.pagePrev = function() {
        that.filters.page = that.meta.page - 1;
        fetchLeads();
    };

    that.changeFilterState = function(st) {

    };

    that.clearFilters = function() {
        $('.filter-panel').fadeOut('fast');
        that.filters = angular.copy(defaultFilters);
    };

    that.processAssignments = function () {

        $('#assignModal').modal('hide');
        C1.showLoader();
        if(that.assignModal.type == 'all' && that.meta.total > 10000)
        {
            sweetAlert('Assignment Error', 'You are attempting to assign over 10,000 leads.', 'error');
            C1.hideLoader();
            return;
        }
        if(!that.assignModal.user) {
            sweetAlert('Assignment Error', 'You must select a user.', 'error');
            C1.hideLoader();
            return;
        }
        var sel = angular.copy(that.selectedProps);
        clearSelectedProps();
        var ass = angular.copy(that.assignModal);
        that.assignModal = {};
        $http.post(C1.api_url()+'api/leads/assign', {
            selected:sel,
            assignData:ass,
            filters:that.filters,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            sweetAlert('Assignment Success', 'Your assignments are being process.   Large batches may take a minute to complete.', 'success');
            C1.hideLoader();
        }).error(function(error){
            sweetAlert('Assignment Error', 'Please try again.', 'error');
            C1.hideLoader();
        });
    };

    that.showDialModal = function (lead) {
        DialDataService.setLead(lead);
    };

    that.assign = function(which) {

        if(which == 'selected' && !that.selectedProps.length)
        {
            sweetAlert('Assignment Error', 'Please select some leads to assign.', 'error');
            return;
        }

        that.assignModal.title = 'Assign to User';
        that.assignModal.user = null;
        that.assignModal.type = which;
        that.assignModal.assign = true;
        $('#assignModal').modal('show');
    };

    that.unassign = function(which) {

        if(which == 'selected' && !that.selectedProps.length)
        {
            sweetAlert('Assignment Error', 'Please select some leads to assign.', 'error');
            return;
        }

        that.assignModal.title = 'Remove from User';
        that.assignModal.user = null;
        that.assignModal.type = which;
        that.assignModal.assign = false;
        $('#assignModal').modal('show');
    };

    that.export = function () {
        C1.showLoader();
        $http.post(C1.api_url()+'api/properties/export', {
            filters:that.filters,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            if(data.path)
            {
                location.href=C1.api_url()+data.path;
            }
            C1.hideLoader();
        }).error(function(error){
            sweetAlert('Export Error', 'Please try again.', 'error');
            C1.hideLoader();
        });
    };

    that.showDetail = function (lead) {
        DetailModalService.setLead(lead);
    };

    var clearSelectedProps = function () {
        that.selectedProps = [];
        $('.assignbox').prop('checked',false);
    };

    var fetchLeads = function() {
        C1.showLoader();
        $http.post(C1.api_url()+'api/properties/all', {
            filters:that.filters,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.leads = data.leads;
            that.meta = data.meta;
            that.meta.totalPages = Math.ceil(that.meta.total/that.meta.perPage);
            C1.hideLoader();
        }).error(function(error){
            sweetAlert('Access Denied', 'Invalid credentials', 'error');
            C1.hideLoader();
        });
    };

    var fetchUsers = function() {
        if(!HelperService.users)
        {
            $http.get(C1.api_url()+'api/users/simple').success(function(data) {
                HelperService.users = data.users;
                that.users = data.users;
            }).error(function(err) {
                sweetAlert('Users List Error', 'error');
            });
        } else {
            that.users = HelperService.users;
        }
    };

    var fetchCounties = function() {
        if(!HelperService.counties)
        {
            $http.get(C1.api_url()+'api/counties/simple').success(function(data) {
                HelperService.counties = data.counties;
                parseCounties();
                C1.hideLoader();
            }).error(function(err) {
                sweetAlert('Counties List Error', 'error');
            });
        } else {
            C1.hideLoader();
            parseCounties();
        }
    };

    var parseCounties = function() {
        that.counties = {};
        var c = HelperService.counties;
        for(var i = 0; i< c.length; i++)
        {
            that.counties[c[i]._id] = c[i].counties;
        }
    };

    $('.sort-btn').on('click', function() {
        var ths = $(this);
        var str = ths.data('sort');
        if(str == that.filters.sortOn)
        {
            that.filters.sortDir = (that.filters.sortDir == 'asc')?'desc':'asc';
        } else {
            that.filters.sortDir = 'asc';
        }
        that.filters.sortOn = str;
        that.filters.page = 1;
        ths.parent().siblings('th').removeClass('active');
        ths.parent().addClass('active');

        fetchLeads();
    });

    $('#selectAllStatuses').on('change', function () {
        var thebox = $(this);
        var tocheck = thebox.prop('checked');
        that.filters.pipelineStatuses = [];
        if(tocheck)
        {
            that.filters.pipelineStatuses = angular.copy(that.statuses);
        }
        $('.statusBox').prop('checked',tocheck);
    });

    $('#filter_state').bind('change','.county-all', function(e) {
        var thebox = $(e.target);
        if(!thebox.hasClass('county-all'))
        {
            return;
        }
        var tocheck = thebox.prop('checked');
        var state = thebox.data('state');
        that.filters.counties[state] = [];
        if(tocheck)
        {
            var all = that.counties[state];
            for(var i = 0; i < all.length; i++)
            {
                var it = all[i];
                that.filters.counties[state].push(it);
            }
        }
        thebox.closest('.row').children('div').last().find('input[type=checkbox]').prop('checked',tocheck);
    });

    $('#filter-list-group').children('button').click(function () {
        var targ = $(this).data('target');
        $('#'+targ).fadeIn('fast');
    });

    $('.filter-panel-close').click(function () {
        var targ = $(this).data('target');
        $(this).closest('.filter-panel').fadeOut('fast');
        $scope.$apply(function () {
            switch(targ)
            {
                case 'leadId':
                    that.filters.leadId = null;
                    break;
                case 'lastName':
                    that.filters.lastName = null;
                    break;
                case 'firstName':
                    that.filters.firstName = null;
                    break;
                case 'street':
                    that.filters.street = null;
                    break;
                case 'city':
                    that.filters.city = null;
                    break;
                case 'states':
                    $('.county-all, .countyBox').prop('checked',false);
                    that.filters.states = angular.copy(defaultFilters.states);
                    that.filters.counties = angular.copy(defaultFilters.counties);
                    break;
                case 'zip':
                    that.filters.zip = null;
                    break;
                case 'phone':
                    that.filters.phone = null;
                    break;
                case 'loanType':
                    that.filters.loanType = 'Both';
                    break;
                case 'mtgAmount':
                    that.filters.mtgAmount = angular.copy(defaultFilters.mtgAmount);
                    break;
                case 'closingDate':
                    that.filters.closingDate = angular.copy(defaultFilters.closingDate);
                    break;
                case 'prevValue':
                    that.filters.prevValue = angular.copy(defaultFilters.prevValue);
                    break;
                case 'zestimate':
                    that.filters.zestimate = angular.copy(defaultFilters.zestimate);
                    break;
                case 'equity':
                    that.filters.equity = angular.copy(defaultFilters.equity);
                    break;
                case 'equityPercent':
                    that.filters.equityPercent = angular.copy(defaultFilters.equityPercent);
                    break;
                case 'pipelineStatuses':
                    that.filters.pipelineStatuses = angular.copy(defaultFilters.pipelineStatuses);
                    break;
                case 'doNot':
                    that.filters.doNot = angular.copy(defaultFilters.doNot);
                    break;
                case 'user':
                    that.filters.user = null;
                    break;
                case 'firstTime':
                    that.filters.firstTime = angular.copy(defaultFilters.firstTime);
                    break;
            }
        });
    });

    $scope.$on('Logged In', function (event, data) {
        $log.log('Logged In');

        that.states = HelperService.states();
        that.buckets = HelperService.lead_buckets();
        var adminStatuses = angular.copy(HelperService.lead_statuses());
        adminStatuses.push('TUD');
        adminStatuses.push('WTD');
        that.statuses = adminStatuses;

        that.users = HelperService.users;
        if(!that.users)
        {
            fetchUsers();
        }
        fetchCounties();
        C1.setMenu('admin');

    });

    that.filters = angular.copy(defaultFilters);
    C1.showLoader();
    AuthService.loggedIn();

    $('#filter_state').on('click','.county-toggle', function () {
        var row = $(this).closest('.row');
        row.find('.county-selector').toggle('slide');
    });
}]);

c1App.controller('AdminNewLeadController', ['$scope','$http','$log','AuthService','HelperService', function ($scope, $http, $log, AuthService,HelperService) {

    $log.log('AdminNewLeadController');
    var that = this;

    $scope.$on('Logged In', function (event, data) {
        $log.log('Logged In');

    
    });

    AuthService.loggedIn();
}]);

c1App.controller('AdminReportsPropBDController', ['$scope','$http','$log','AuthService','HelperService',
    function ($scope, $http, $log, AuthService,HelperService) {

        $log.log('AdminReportsPropBDController');

        var that = this;
        that.states = [];

        function fetchReport() {

                $http.post(C1.api_url() + 'api?action=propertyBreakdown', {t: AuthService.token},
                    {headers: {'Content-Type': 'application/json'}}).success(function (data) {
                    that.states = data.states;
                    C1.hideLoader();
                }).error(function (err) {
                    C1.hideLoader();
                    sweetAlert('Error retrieving report', 'error');
                });
            
        }


        $scope.$on('Logged In', function (event, data) {
            $log.log('Logged In');
            fetchReport();
            C1.setMenu('admin');
        });

        C1.showLoader();
        AuthService.loggedIn();
}]);

c1App.controller('AdminTeamsController', ['$scope','$http','$log','AuthService','HelperService',
    function ($scope, $http, $log, AuthService,HelperService) {

        $log.log('AdminTeamsController');

        var that = this;
        that.roles = [];
        that.teams = [];
        that.users = [];

        that.editTeam = function (u, i) {
            that.waitingTeam = i;
            that.editingTeam = angular.copy(u);
        };

        var fetchTeams = function () {
            $http.post(C1.api_url()+'api/teams/all', {t:AuthService.token},
                {headers: {'Content-Type': 'application/json'}}).success(function(data) {
                that.teams = data.teams;
                $log.log(that.teams);
                C1.hideLoader();
            }).error(function(err) {
                C1.hideLoader();
                sweetAlert('Teams List Error', 'error');
            });
        };

        var fetchUsers = function() {
            $http.post(C1.api_url() + 'api/users/all', {t: AuthService.token},
                {headers: {'Content-Type': 'application/json'}}).success(function (data) {
                that.users = data.users;
                $log.log(that.users);
                C1.hideLoader();
            }).error(function (err) {
                C1.hideLoader();
                sweetAlert('Users List Error', 'error');
            });
        };

        that.saveTeam = function () {
            C1.showLoader();
            var url = (that.editingTeam._id)?'edit':'new';
            $http.post(C1.api_url()+'api/teams/'+url,
                {
                    team:that.editingTeam,
                    t:AuthService.token
                },
                {headers: {'Content-Type': 'application/json'}}).success(function(data) {
                if(url == 'new')
                {
                    that.teams.push(data.team);
                } else {
                    that.teams[that.waitingTeam] = data.team;
                }
                that.editingTeam = null;
                $.notify('Team saved', 'success');
                C1.hideLoader();
            }).error(function(err) {
                C1.hideLoader();
                sweetAlert('Error saving team', 'error');
            });
        };

        $scope.$on('Logged In', function (event, data) {
            $log.log('Logged In');
            that.roles = HelperService.roles();
            fetchTeams();
            fetchUsers();
            C1.setMenu('admin');
        });

        C1.showLoader();
        AuthService.loggedIn();
}]);

c1App.controller('AdminUsersController', ['$scope','$http','$log','AuthService','HelperService',
    function ($scope, $http, $log, AuthService,HelperService) {

    $log.log('AdminUsersController');

    var that = this;

    that.editUser = function (u, i) {
        that.waitingUser = i;
        that.editingUser = angular.copy(u);
        that.editingUser.password = null;
    };

    that.saveUser = function () {
        C1.showLoader();
        var url = (that.editingUser._id)?'edit':'new';
        if(url == 'edit')
        {
            if(!that.editingUser.password)
            {
                delete that.editingUser.password;
            }
        }
        $http.post(C1.api_url()+'api/users/'+url,
            {
                user:that.editingUser,
                t:AuthService.token
            },
            {headers: {'Content-Type': 'application/json'}}).success(function(data) {
            if(url == 'new')
            {
                that.users.push(data.user);
            } else {
                that.users[that.waitingUser] = data.user;
            }
            that.editingUser = null;
            $.notify('User saved', 'success');
            C1.hideLoader();
        }).error(function(err) {
            C1.hideLoader();
            sweetAlert('Error saving user', 'error');
        });
    };

    var fetchUsers = function() {
        $http.post(C1.api_url()+'api/users/all', {t:AuthService.token},
            {headers: {'Content-Type': 'application/json'}}).success(function(data) {
            that.users = data.users;
            C1.hideLoader();
        }).error(function(err) {
            C1.hideLoader();
            sweetAlert('Users List Error', 'error');
        });
    };

    $scope.$on('Logged In', function (event, data) {
        $log.log('Logged In');
        that.roles = HelperService.roles();
        fetchUsers();
        C1.setMenu('admin');
    });

    C1.showLoader();
    AuthService.loggedIn();
}]);

c1App.controller('ClosedModalController', ['$scope','$log','ClosedModalService', 'HelperService',
    function ($scope, $log,ClosedModalService, HelperService) {

        $log.log('ClosedModalController');
        var that = this;
        that.iTypes= [];
        that.closed = {mortgage:{}};

        that.proceed = function () {
            
            ClosedModalService.setClosed(that.closed);
            $('#closedModal').modal('hide');
        };

        $scope.$on('closed-loan-data-ready', function () {
            that.closed = {mortgage:{}};
            that.iTypes = HelperService.indexTypes();
            $('#closedModal').modal('show');
        });


}]);

c1App.controller('DetailModalController', ['$scope','$rootScope','$log','$http','DetailModalService','AuthService',
    'HelperService','TakeAppService','DocsOutService','DialDataService','SourceModalService', 'ClosedModalService', '$sce',
    function ($scope, $rootScope, $log,$http, DetailModalService,AuthService,HelperService,TakeAppService,DocsOutService,DialDataService,SourceModalService,ClosedModalService,$sce) {

    $log.log('DetailModalController');
    var that = this;
    var modal = null;
    that.lead;
    that.isAdmin = false;
    that.isOwner = false;
    that.canChangeStatus = false;
    that.canChangeOwner = false;
    that.users = [];
    that.statuses = [];
    that.filteredComments = [];
    that.addToCalendarForm = false;
    that.newOwner;
    that.newTud;
    that.newWtd;
    that.newStatus;
    that.isLead = false;
    that.wpResults = null;
    that.weatherAPIKey = "27d62af91ddce30ce81a0cc2c057d375";
    that.weatherAPIURL = "http://api.openweathermap.org/data/2.5/weather";
    that.weatherIconURL = "http://openweathermap.org/img/w/";
    that.weather;
    that.mapAPIKey = "AIzaSyAoKUa2yKLSax4gr0LB1jHoB8PCC4tKttY";
    that.mapAPIURL = "https://www.google.com/maps/embed/v1/place";
    that.mapSrc;

    var getWeather = function(zip) {
        console.log('getting weather');
        $http.get(that.weatherAPIURL+'?zip='+zip+'&units=imperial&APPID='+that.weatherAPIKey)
            .success(function (res) {
                console.log(res);
                that.weather = res;
            })
            .error(function (e) {
                console.log('Weather Error');
            });
    }

    var getMap = function (address) {
        that.mapSrc = $sce.trustAsResourceUrl(that.mapAPIURL + '?key=' + that.mapAPIKey + '&q=' + address.street1 + ', ' + address.city + ' ' + address.state);
    }

    var filterComments = function (n) {
        var ret = [];
        if(that.isAdmin)
        {
            ret = n;
        } else {

            for(var i = 0; i<n.length;i++)
            {
                if(n[i].user == that.currentUser._id)
                {
                    ret.push(n[i]);
                }
            }
        }
        return ret;
    };

    that.takeApp = function () {
        TakeAppService.setApp(null);
        TakeAppService.setLead(that.lead);
    };

    that.showDialModal = function () {
        DialDataService.setLead(this.lead);
    };

    that.docsOut = function () {
        DocsOutService.setLead(that.lead);
    };

    that.hideModal = function () {
        that.lead = null;
        modal = $('#detail-modal').fadeOut('fast');
    };

    that.clearCommentForm = function () {
        that.newComment = null;
        that.showCommentForm = false;
    };

    that.clearCalendarForm = function () {
        that.addToCalendarForm = false;
        that.newCalendarItem = null;
    };

    that.saveComment = function () {
        var toSave = angular.copy(that.newComment);
        $http.post(C1.api_url()+'api/properties/add_comment', {
            property:that.lead._id,
            comment:toSave,
            user:that.currentUser,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.lead.comments = data.comments;
            that.newComment = null;
            that.showCommentForm = false;
            $.notify('new comment added',"success");
            that.filteredComments = filterComments(that.lead.comments);
        }).error(function(error){
            $.notify('Error saving comment',"error");
        });
    };

    that.deleteComment = function (c) {
        $http.post(C1.api_url()+'api/properties/delete_comment', {
            property:that.lead._id,
            comment:c,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.lead.comments = data.comments;
            that.newComment = null;
            that.showCommentForm = false;
            $.notify('new comment added',"success");

        }).error(function(error){
            $.notify('Error saving comment',"error");
        });
    };

    that.clearPhoneForm = function () {
        that.newPhone = null;
        that.showAddPhoneForm = false;
    };

    that.savePhone = function () {
        var toSave = angular.copy(that.newPhone);
        $http.post(C1.api_url()+'api/properties/add_phone', {
            property:that.lead._id,
            phone:toSave,
            user:that.currentUser,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.lead.phones = data.phones;
            that.newPhone = null;
            that.showAddPhoneForm = false;
            $.notify('new phone added',"success");

        }).error(function(error){
            $.notify('Error saving phone',"error");
        });
    };

    that.saveWPPhone = function (p) {
        $http.post(C1.api_url()+'api?action=saveWPPhone', {
            property:that.lead._id,
            phone:p,
            user:that.currentUser,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.lead.phones = data.phones;
            $.notify('new phone added',"success");

        }).error(function(error){
            $.notify('Error saving phone',"error");
        });
    };
    
    that.updatePhoneStatus = function (phone) {
        var changeTo = (phone.status == 'Good')?'Bad':'Good';
        $http.post(C1.api_url()+'api/properties/phone_status', {
            property:that.lead._id,
            status:changeTo,
            phone:phone,
            user:that.currentUser,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            phone.status = changeTo;
            phone.user = that.currentUser;
            phone.userName = that.currentUser.name.last+', '+that.currentUser.name.first;
            $.notify('phone status changed',"success");

        }).error(function(error){
            $.notify('Error changing status',"error");
        });

    };

    that.toggleDNC = function () {
        var changeTo = (that.lead.canCall == 'Yes')?'No':'Yes';
        $http.post(C1.api_url()+'api/properties/change_dnc', {
            property:that.lead._id,
            status:changeTo,
            user:that.currentUser,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.lead.canCall = data.lead.canCall;
            $.notify('DNC status changed',"success");
            $rootScope.$broadcast('detail-lead-dnc');
        }).error(function(error){
            $.notify('Error changing DNC',"error");
        });

    };

    that.toggleDNM = function () {
        var changeTo = (that.lead.canMail == 'Yes')?'No':'Yes';
        $http.post(C1.api_url()+'api/properties/change_dnm', {
            property:that.lead._id,
            status:changeTo,
            user:that.currentUser,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.lead.canMail = data.lead.canMail;
            $.notify('DNM status changed',"success");
            $rootScope.$broadcast('detail-lead-dnm');
        }).error(function(error){
            $.notify('Error changing DNM',"error");
        });

    };

    that.tud = function () {
        var tud = {
            reason:that.newTud,
            type:'TUD',
            date:Date.now(),
            user:that.currentUser,
            userName:that.currentUser.name.first+' '+that.currentUser.name.last
        };
        $http.post(C1.api_url()+'api/properties/turn_down', {
            property:that.lead._id,
            turnDown:tud,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.lead.turnDowns.push(tud);
            $.notify('TUD success',"success");
            $rootScope.$broadcast('detail-lead-turned-down');
        }).error(function(error){
            $.notify('Error processing TUD',"error");
        });
    };

    that.wtd = function () {
        var wtd = {
            reason:that.newWtd,
            date:Date.now(),
            type:'WTD',
            user:that.currentUser,
            userName:that.currentUser.name.first+' '+that.currentUser.name.last
        };
        $http.post(C1.api_url()+'api/properties/turn_down', {
            property:that.lead._id,
            turnDown:wtd,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.lead.turnDowns.push(wtd);
            $.notify('WTD success',"success");
            $rootScope.$broadcast('detail-lead-turned-down');
        }).error(function(error){
            $.notify('Error processing WTD',"error");
        });
    };

    that.claim = function () {
        if(that.lead.pipelineOwner)
        {
            sweetAlert('Claim Error', 'You cannot claim this lead.', 'error');
            return;
        }

        SourceModalService.setLead(that.lead);
    };

    $scope.$on('lead-with-source-ready', function () {
        $http.post(C1.api_url()+'api/leads/claim', {
            property:SourceModalService.getLead()._id,
            source:SourceModalService.getSource(),
            user:that.currentUser,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.lead = data.property;
            $.notify('Claim success',"success");
            $rootScope.$broadcast('detail-lead-claim');
        }).error(function(error){
            $.notify('Not able to claim',"error");
        });
    });

    $scope.$on('lead-with-closed-ready', function() {
        $http.post(C1.api_url()+'api/properties/change_status_closed', {
            property:that.lead._id,
            user:that.currentUser,
            closed:ClosedModalService.getClosed(),
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.lead = data.property;
            DetailModalService.updateLead(that.lead, ['status','statuses','bucket']);
            $.notify('Status change success',"success");
            $rootScope.$broadcast('detail-lead-claim');
        }).error(function(error){
            $.notify('Not able to change status',"error");
        });
    });



    that.claimLead = function () {

        if(that.lead.pipelineOwner)
        {
            sweetAlert('Claim Error', 'You cannot claim this lead.', 'error');
            return;
        }
        $http.post(C1.api_url()+'api/leads/claim_lead', {
            property:that.lead._id,
            user:that.currentUser,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.lead.status = 'Lead';
            that.lead.bucket = 'Leads';
            $.notify('Claim Lead success',"success");
            $rootScope.$broadcast('detail-lead-claim-lead');
        }).error(function(error){
            $.notify('Not able to claim',"error");
        });

    };

    that.changeStatus = function () {

        if(that.newStatus == 'Closed')
        {
            ClosedModalService.setLead(that.lead);
            return false;
        }

        $http.post(C1.api_url()+'api/properties/change_status', {
            property:that.lead._id,
            user:that.currentUser,
            status:that.newStatus,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.lead = data.property;
            DetailModalService.updateLead(that.lead, ['status','statuses','bucket']);
            $.notify('Status change success',"success");
            $rootScope.$broadcast('detail-lead-claim');
        }).error(function(error){
            $.notify('Not able to change status',"error");
        });
    };

    that.changeOwner = function () {
        $http.post(C1.api_url()+'api/properties/change_owner', {
            property:that.lead._id,
            user:that.currentUser,
            owner:that.newOwner,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.lead = data.property;
            $.notify('Owner change success',"success");
            $rootScope.$broadcast('detail-lead-claim');
        }).error(function(error){
            $.notify('Not able to change owner',"error");
        });
    };

    that.changeColor = function (c) {
        $http.post(C1.api_url()+'api/properties/change_color', {
            property:that.lead._id,
            user:that.currentUser,
            color:c,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.lead = data.property;
            $log.log(that.lead);
            DetailModalService.updateLead(that.lead, ['colors']);
            $.notify('Color change success',"success");
            $rootScope.$broadcast('detail-color-change');
        }).error(function(error){
            $.notify('Not able to change color',"error");
        });
    };

    that.editApp = function (app) {
        $http.post(C1.api_url()+'api/apps/load', {
            app:app,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            var app = data.app;
            TakeAppService.setApp(app);
            TakeAppService.setLead(that.lead);
        }).error(function(error){
            $.notify('Not able to load app',"error");
        });
    };

    that.canViewApplication = function (app) {
        if(that.isAdmin)
        {
            return true;
        } else if(app.user == that.currentUser._id)
        {
            return true;
        } else if(AuthService.teamMembers.indexOf(app.user)>=0) {
            return true;
        } else {
            return false;
        }
    };

    that.homesnapLink = function (l) {
        if(l)
        {
            return link = "http://www.homesnap.com/search?q="+encodeURI(l.address.street1+', '+l.address.zip);
        } else {
            return '';
        }
    };

    that.getWP = function () {

        C1.showLoader();

        $http.post(C1.api_url() + 'api?action=fetchWhitePages', {
            propertyId: that.lead._id,
            user: that.currentUser,
            t: AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function (data) {
            C1.hideLoader();
            that.wpResults = data.results;
        }).error(function (error) {
            C1.hideLoader();
            sweetAlert('Oops!', 'There was a problem retrieving your data.', 'error');
        });
    }
        
    var checkHasLead = function () {

        $http.post(C1.api_url()+'api?action=checkHasLead', {
            property_id:that.lead._id,
            user_id:that.currentUser._id,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.isLead = data.has;
        }).error(function(error){
            //$.notify('Not able to load app',"error");
        });

    };

    var fetchUsers = function() {
        if(!HelperService.users)
        {
            $http.get(C1.api_url()+'api/users/simple').success(function(data) {
                HelperService.users = data.users;
                that.users = data.users;
            }).error(function(err) {
                sweetAlert('Users List Error', 'error');
            });
        } else {
            that.users = HelperService.users;
        }
    };

    $scope.preferWhitePages = function (item) {
        if(item.source == 'Internal')
        {
            return 1;
        } else if(item.source == 'WhitePages')
        {
            return 2;
        } else {
            return 3;
        }
    };

    $scope.$on('detail-to-close', function () {
        that.hideModal();
    });


    $scope.$on('detail-data-ready', function () {
        that.lead = DetailModalService.lead;
        modal = $('#detail-modal').fadeIn();
        that.users = HelperService.users;
        if(!that.users)
        {
            fetchUsers();
        }
        that.statuses = HelperService.lead_statuses();
        that.isAdmin = AuthService.isAdmin;
        that.currentUser = AuthService.user;
        that.filteredComments = filterComments(that.lead.comments);
        that.tuds = HelperService.tud_statuses();
        that.wtds = HelperService.wtd_statuses();
        that.isLead = false;
        that.wpResults = null;
        if(that.lead.pipelineOwner)
        {
            that.isOwner = that.lead.pipelineOwner._id == that.currentUser._id;
        } else {
            that.isOwner = false;
            checkHasLead();
        }

        if(that.isOwner || that.isAdmin)
        {
            that.canChangeStatus = true;
            that.canChangeOwner = true;
        } else if(that.lead.pipelineOwner && AuthService.teamMembers.indexOf(that.lead.pipelineOwner._id)>=0) {
            that.canChangeStatus = true;
            that.canChangeOwner = true;
        } else {
            that.canChangeStatus = false;
            that.canChangeOwner = false;
        }
        if(that.lead.address.zip) {
            getWeather(that.lead.address && that.lead.address.zip);
            getMap(that.lead.address);
        }
        /*
        $scope.$watchCollection(function () {
            console.log('watched');
            return (that.lead && that.lead.comments)?that.lead.comments:[];
        }, function (n, o) {
            if(n)
            {
                that.filteredComments = [];
                if(that.isAdmin)
                {
                    that.filteredComments = n;
                } else {
                    console.log('going to loop');
                    for(var i = 0; i<n.length;i++)
                    {
                        console.log(n[i]);
                        console.log(that.currentUser._id);
                        if(n[i].user == that.currentUser._id)
                        {
                            that.filteredComments.push(n[i]);
                        }
                    }
                }
            }
        });
        */

    });


    that.weather = null;
    that.mapSrc = null;

}]);

c1App.controller('DialModalController', ['$scope','$rootScope','$log','$http','AuthService',
    'HelperService','DialDataService',
    function ($scope, $rootScope, $log,$http,AuthService,HelperService,DialDataService) {

        $log.log('DialModalController');
        var that = this;
        that.phones = [];
        that.owner = '';
        that.address = '';

        that.callPhone = function (num) {
            $http.post(C1.api_url()+'api?action=evolveDialPhone', {
                number:num,
                user_id:AuthService.user.phones.desk,
                t:AuthService.token
            }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
                $.notify('Dialing...',"success");
            }).error(function(error){
                //$.notify('Not able to load app',"error");
            });
        };

        $scope.$on('dial-data-ready', function () {
            that.phones = DialDataService.getPhones();
            that.owner = DialDataService.getBorrowers();
            that.address = DialDataService.getAddress();
            $('#dialModal').modal('show');
        });


}]);

c1App.controller('DocsOutController', ['$scope','$rootScope','$log','$http','AuthService',
    'HelperService','DocsOutService',
    function ($scope, $rootScope, $log,$http,AuthService,HelperService,DocsOutService) {

        $log.log('DocsOutController');
        var that = this;
        var modal = null;
        that.lead = null;
        that.form = {};

        that.hideModal = function () {
            that.lead = null;
            modal = $('#docs-out').fadeOut('fast');
        };


        $scope.$on('docs-out-data-ready', function () {
            that.lead = DocsOutService.getLead();

            $('#docs-out').fadeIn();
        });


}]);

c1App.controller('EditPropController', ['$scope','$rootScope','$log','$http','AuthService',
    'HelperService','EditPropService',
    function ($scope, $rootScope, $log,$http,AuthService,HelperService,EditPropService) {

        $log.log('EditPropController');
        var that = this;
        that.states = HelperService.states();
        that.lead = {};

        that.cancel = function() {
            that.lead = {};
            $('#edit-prop').fadeOut();
        };

        that.save = function () {
          $log.log('saving');
          C1.showLoader();
          $http.post(C1.api_url()+'api?action=saveNewProp', {
              property: that.lead,
              user: AuthService.user,
              t:AuthService.token
          }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
              var newLead = data.property;
              EditPropService.setNewLead(newLead);
              C1.hideLoader();
              $.notify('new lead added', 'success');
              that.lead = {};
              $('#edit-prop').fadeOut();
          }).error(function(error){
              sweetAlert('Oops', 'That lead could not be saved.  Make sure the address is not already in the system.', 'error');
              C1.hideLoader();
          });
        };

        $scope.$on('edit-prop-data-ready', function () {
            $('#edit-prop').fadeIn();
        });

}]);

c1App.controller('HomeController', ['$scope','$http','$log','AuthService', function ($scope, $http, $log, AuthService) {

    $log.log('HomeController');

    var that = this;
    that.callTotals = [];
    that.missedCalls = [];
    var timer = null;
    var timer2 = null;
    that.yorkBranch = false;

    function initTimer() {
        if(!timer)
        {
            getCallTotals();
            timer = setInterval(function () {
                getCallTotals();
            }, 90000);
        }

        if(!timer2)
        {
            getMissedCalls();
            timer2 = setInterval(function () {
                getMissedCalls();
            }, 180000);
        }
    };

    function getPropertyStats() {

        if(timer)
        {
            return;
        }
        $http.get(C1.api_url()+'api?action=basicPropertyStats&id='+that.currentUser._id).success(function(data) {
            var ctx = $('#lead-dist-chart');
            var labels = [];
            var vals = [];
            data.stats.map(function (o) {
                labels.push(o._id.bucket);
                vals.push(o.count);
            });
            // console.log(labels);
            // console.log(vals);
            var bpChart = new Chart(ctx, {
                type:"doughnut",
                data:{
                    labels:labels,
                    datasets:[{
                        data:vals,
                        backgroundColor:[
                            '#C0392B',
                            '#9B59B6',
                            '#2980B9',
                            '#1ABC9C',
                            '#27AE60',
                            '#F1C40F',
                            '#E67E22',
                            '#E74C3C',
                            '#8E44AD',
                            '#3498DB',
                            '#16A085',
                            '#2ECC71',
                            '#F39C12',
                            '#D35400'
                        ]
                    }]
                },
                options:{}
            });
        }).error(function(err) {
            sweetAlert('Unable to load lead distribution', 'error');
        }).then(initTimer());

    };

    function getMissedCalls() {
        if(that.yorkBranch) { return; }
        $http.post(C1.api_url()+'api?action=getMissedCalls2', {user:that.currentUser,t:AuthService.token}).success(function(data) {
            that.missedCalls = data.results;
        }).error(function(err) {
            sweetAlert('Unable to load missed calls', 'error');
        });
    }

    that.deleteMissedCall = function(c, i) {
        $http.post(C1.api_url()+'api?action=deleteMissedCall', {call:c,t:AuthService.token}).success(function(data) {
            $.notify('Missed Call Deleted', 'info');
            that.missedCalls.splice(i, 1);
        }).error(function(err) {
            $.notify('oops, could not delete call.', 'error');
        });
    }


    function getCallTotals() {
        if(that.yorkBranch) { return; }
        $http.post(C1.api_url()+'api?action=getCallTotals2', {t:AuthService.token}).success(function(data) {
            $log.log('call totals received');
            that.callTotals = data.results;
        }).error(function(err) {
            sweetAlert('Unable to load call totals', 'error');
        });
    };

        $scope.$on('$destroy', function () {
           clearInterval(timer);
           timer = null;
            clearInterval(timer2);
            timer2 = null;
        });


    $scope.$on('Logged In', function (event, data) {
        $log.log('Logged In');
        C1.hideLoader();
        C1.setMenu('dashboard');
        that.currentUser = AuthService.user;
        if(that.currentUser.office && that.currentUser.office == 'York 1')
        {
            that.yorkBranch = true;
        }
        getPropertyStats();
    });

    AuthService.loggedIn();
}]);

c1App.controller('LeadsController', ['$scope','$rootScope','$http','$log','AuthService','HelperService',
    'DetailModalService','DialDataService','EditPropService', function ($scope, $rootScope, $http, $log, AuthService,HelperService, DetailModalService,DialDataService,EditPropService) {

    $log.log('LeadsController');

    var that = this;
    that.selectedProps = [];
    that.states = [];
    that.viewUser;

    if(C1.page.leads.leads.length)
    {
        that.leads = C1.page.leads.leads;
        that.meta = C1.page.leads.meta;
        that.filters = C1.page.leads.filters;
    } else {
        that.leads = [];
        that.meta = {
            pages:0,
            page:1,
            perPage:25
        };
        that.filters = {};
    }
    var defaultFilters = {
        page:1,
        perPage:25,
        sortOn:'owner.primary.name.last',
        sortDir:'asc',
        states:[],
        counties:{},
        loanType:'Both',
        closingDate:{
            start:'1/1/1975',
            end:moment().format('M/D/YYYY')
        },
        mtgAmount:{
            min:0,
            max:2500000
        },
        prevValue:{
            min:0,
            max:2500000
        },
        zestimate:{
            min:0,
            max:2500000
        },
        equity:{
            min:0,
            max:1000000
        },
        equityPercent:{
            min:0,
            max:1000
        },
        doNot:'notdnc',
        pipelineStatuses:['Lead','WTD','TUD']
    };

    that.showEditPropModal = function() {
      $rootScope.$broadcast('edit-prop-data-ready');
    };

    that.showDialModal = function (lead) {
        DialDataService.setLead(lead);
    };

    that.refreshLeads = function() {
        $log.log('refresh Leads');
        that.page = 1;
        fetchLeads();
    };

    that.pageStart = function() {
        that.filters.page = 1;
        fetchLeads();
    };

    that.pageEnd = function() {
        that.filters.page = that.meta.totalPages;
        fetchLeads();
    };

    that.pageNext = function() {
        that.filters.page = that.meta.page + 1;
        fetchLeads();
    };

    that.pagePrev = function() {
        that.filters.page = that.meta.page - 1;
        fetchLeads();
    };

    that.changeFilterState = function(st) {

    };

    that.clearFilters = function() {
        $('.filter-panel').fadeOut('fast');
        that.filters = angular.copy(defaultFilters);
    };

    that.showDetail = function (lead) {
        DetailModalService.setLead(lead);
    };

    that.gotoPage = function () {
        if(this.selectedPage > 0 && this.selectedPage <= this.meta.totalPages)
        {
            this.filters.page = this.selectedPage;
            fetchLeads();
        } else {
            sweetAlert('Page Error', 'Please choose a valid page', 'error');
        }
    };

    that.saveFilter = function () {
        swal({
            title: "Save Filter",
            type: "input",
            showCancelButton: true,
            closeOnConfirm: true,
            animation: "slide-from-top",
            inputPlaceholder: "Enter Name"
        }, function (inputValue) {
            if (inputValue === false) return false;
            if (inputValue === "") {
                swal.showInputError("You need to give it a name!");
                return false
            }
            var tosave = angular.copy(that.filters);
            $http.post(C1.api_url()+'api?action=saveFilter', {
                filter:tosave,
                filterName:inputValue,
                user:that.currentUser,
                t:AuthService.token
            }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
                $.notify('Filter Saved', 'info');
                HelperService.userFilters.push(data.filter);
                that.userFilters = HelperService.userFilters;
            }).error(function(error){
                sweetAlert('Oops', 'We could not save that.', 'error');
            });


            $.notify(that.meta.total+' leads found', 'info');
        });
    };

    that.loadSavedFilter = function (filt) {

        that.filters = angular.copy(filt.params);
        that.filters.user = null;
        fetchLeads();
    };

    that.removeSavedFilter = function (f,i) {
        $http.post(C1.api_url()+'api?action=removeFilter', {
            filter:f,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            $.notify('Filter Removed', 'info');
            that.userFilters = HelperService.userFilters.splice(i, 1);
        }).error(function(error){
            sweetAlert('Oops', 'We could not remove that.', 'error');
        });
    };

    $scope.bestColor = function (l) {
        if(l.colors.length)
        {
            for(i = (l.colors.length-1); i>=0;i--)
            {
                var c = l.colors[i];
                if(c.user == that.currentUser._id)
                {
                    return c.name;
                    break;
                }
            }
        } else {
            return null;
        }
    };

    var clearSelectedProps = function () {
        that.selectedProps = [];
        $('.assignbox').prop('checked',false);
    };

    var fetchLeads = function() {
        $log.log('fetching');
        C1.showLoader();
        that.filters.user = (that.viewUser) ? that.viewUser : AuthService.user;
        $http.post(C1.api_url()+'api/properties/all', {
            filters:that.filters,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.leads = data.leads;
            that.meta = data.meta;
            that.meta.totalPages = Math.ceil(that.meta.total/that.meta.perPage);
            C1.page.leads.leads = that.leads;
            C1.page.leads.meta = that.meta;
            C1.page.leads.filters = that.filters;
            C1.hideLoader();
            $.notify(that.meta.total+' leads found', 'info');
        }).error(function(error){
            sweetAlert('Access Denied', 'Invalid credentials', 'error');
            C1.hideLoader();
        });
    };

    var fetchUsers = function() {
        if(!HelperService.users)
        {
            $http.get(C1.api_url()+'api/users/simple').success(function(data) {
                HelperService.users = data.users;
                that.users = data.users;
            }).error(function(err) {
                sweetAlert('Users List Error', 'error');
            });
        } else {
            that.users = HelperService.users;
        }
    };

    var fetchUserFilters = function () {
        if(!HelperService.userFilters) {
            $http.post(C1.api_url()+'api?action=getFilters', {
                t:AuthService.token,
                user:that.currentUser
            },{headers: {'Content-Type': 'application/json'}}
            ).success(function(data) {
                HelperService.userFilters = data.filters;
                that.userFilters = HelperService.userFilters;
            }).error(function(err) {
                sweetAlert('Users List Error', 'error');
            });
        }
    }

    var fetchCounties = function() {
        if(!HelperService.counties)
        {
            $http.get(C1.api_url()+'api/counties/simple').success(function(data) {
                HelperService.counties = data.counties;
                parseCounties();
                if(!that.leads.length)
                {
                    fetchLeads();
                } else {
                    C1.hideLoader();
                }

            }).error(function(err) {
                sweetAlert('Counties List Error', 'error');
            });
        } else {
            if(!that.leads.length)
            {
                fetchLeads();
            } else {
                C1.hideLoader();
            }
            parseCounties();

        }
    };

    var parseCounties = function() {
        that.counties = {};
        var c = HelperService.counties;
        for(var i = 0; i< c.length; i++)
        {
            that.counties[c[i]._id] = c[i].counties;
        }
    };

    $('.sort-btn').on('click', function() {
        var ths = $(this);
        var str = ths.data('sort');
        if(str == that.filters.sortOn)
        {
            that.filters.sortDir = (that.filters.sortDir == 'asc')?'desc':'asc';
        } else {
            that.filters.sortDir = 'asc';
        }
        that.filters.sortOn = str;
        that.filters.page = 1;
        ths.parent().siblings('th').removeClass('active');
        ths.parent().addClass('active');

        fetchLeads();
    });

    $('#selectAllStatuses').on('change', function () {
        var thebox = $(this);
        var tocheck = thebox.prop('checked');
        that.filters.pipelineStatuses = [];
        if(tocheck)
        {
            that.filters.pipelineStatuses = angular.copy(that.statuses);
        }
        $('.statusBox').prop('checked',tocheck);
    });

    $('#filter_state').bind('change','.county-all', function(e) {
        var thebox = $(e.target);
        if(!thebox.hasClass('county-all'))
        {
            return;
        }
        var tocheck = thebox.prop('checked');
        var state = thebox.data('state');
        that.filters.counties[state] = [];
        if(tocheck)
        {
            var all = that.counties[state];
            for(var i = 0; i < all.length; i++)
            {
                var it = all[i];
                that.filters.counties[state].push(it);
            }
        }
        thebox.closest('.row').children('div').last().find('input[type=checkbox]').prop('checked',tocheck);
    });

    $('#filter-list-group').children('button').click(function () {
        var targ = $(this).data('target');
        $('#'+targ).fadeIn('fast');
    });

    $('.filter-panel-close').click(function () {
        var targ = $(this).data('target');
        $(this).closest('.filter-panel').fadeOut('fast');
        $scope.$apply(function () {
            switch(targ)
            {
                case 'leadId':
                    that.filters.leadId = null;
                    break;
                case 'lastName':
                    that.filters.lastName = null;
                    break;
                case 'firstName':
                    that.filters.firstName = null;
                    break;
                case 'street':
                    that.filters.street = null;
                    break;
                case 'city':
                    that.filters.city = null;
                    break;
                case 'states':
                    $('.county-all, .countyBox').prop('checked',false);
                    that.filters.states = angular.copy(defaultFilters.states);
                    that.filters.counties = angular.copy(defaultFilters.counties);
                    break;
                case 'zip':
                    that.filters.zip = null;
                    break;
                case 'phone':
                    that.filters.phone = null;
                    break;
                case 'loanType':
                    that.filters.loanType = 'Both';
                    break;
                case 'mtgAmount':
                    that.filters.mtgAmount = angular.copy(defaultFilters.mtgAmount);
                    break;
                case 'closingDate':
                    that.filters.closingDate = angular.copy(defaultFilters.closingDate);
                    break;
                case 'prevValue':
                    that.filters.prevValue = angular.copy(defaultFilters.prevValue);
                    break;
                case 'zestimate':
                    that.filters.zestimate = angular.copy(defaultFilters.zestimate);
                    break;
                case 'equity':
                    that.filters.equity = angular.copy(defaultFilters.equity);
                    break;
                case 'equityPercent':
                    that.filters.equityPercent = angular.copy(defaultFilters.equityPercent);
                    break;
                case 'pipelineStatuses':
                    that.filters.pipelineStatuses = angular.copy(defaultFilters.pipelineStatuses);
                    break;
                case 'doNot':
                    that.filters.doNot = angular.copy(defaultFilters.doNot);
                    break;
                case 'user':
                    that.filters.user = null;
                    break;
            }
        });
    });

    $scope.usersComments = function () {
        return function (comment) {
            return comment.user == that.currentUser._id;
        };
    };

    $scope.$on('new-prop-data-ready', function () {
        var lead = EditPropService.getLead();
        that.leads.unshift(lead);
    });

    $scope.$on('detail-lead-turned-down', function () {
        var lead = DetailModalService.getLead();
        var i = that.leads.indexOf(lead);
        that.leads.splice(i,1);
        $rootScope.$broadcast('detail-to-close');
    });

    $scope.$on('detail-color-change', function () {
        var lead = DetailModalService.getLead();
        var i = that.leads.indexOf(lead);
        that.leads[i] = lead;

    });

    $scope.$on('detail-lead-claim', function () {
        var lead = DetailModalService.getLead();
        var i = that.leads.indexOf(lead);
        that.leads.splice(i,1);
        $rootScope.$broadcast('detail-to-close');
    });

    $scope.$on('view-user-ready', function () {
        that.viewUser = HelperService.getViewUser();
        fetchLeads();
    });

    $scope.$on('Logged In', function (event, data) {
        $log.log('Logged In');

        that.states = HelperService.states();
        that.buckets = HelperService.lead_buckets();
        that.statuses = HelperService.lead_statuses();
        that.users = HelperService.users;
        that.currentUser = AuthService.user;
        if(!that.users)
        {
            fetchUsers();
        }
        fetchCounties();
        fetchUserFilters();
        C1.setMenu('leads');
    });
    if(!that.leads.length)
    {
        that.filters = angular.copy(defaultFilters);
    }

    C1.showLoader();
    AuthService.loggedIn();

    $('#filter_state').on('click','.county-toggle', function () {
        var row = $(this).closest('.row');
        row.find('.county-selector').toggle('slide');
    });
}]);

c1App.controller('LoginController', ['$scope','$http','$log','AuthService', function ($scope, $http, $log, AuthService) {

    var cntrl = this;
    cntrl.user = undefined;

    $log.log('LoginController');

    $scope.$on('Logged Out', function (event, data) {
        $log.log('Logged Out');
        sweetAlert('Thanks for Visiting!', 'You have been logged out of C1', 'info');
    });

    cntrl.login = function (valid) {
        if(!valid)
        {
            return;
        }
        C1.showLoader();
        var tosend = angular.copy(cntrl.user);
        cntrl.user = undefined;
        $http.post(C1.api_url()+'api/login', {
            email:tosend.email,
            password:tosend.password
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            data.user.password = null;
            AuthService.logIn(data.user, data.teamMembers, data.token);
        }).error(function(error){
            sweetAlert('Access Denied', 'Invalid credentials', 'error');
            C1.hideLoader();
        });
    };

    AuthService.logOut();
    C1.hideLoader();
}]);

c1App.controller('PipelineController', ['$scope','$rootScope','$http','$log','AuthService','HelperService',
    'DetailModalService','DialDataService', function ($scope, $rootScope, $http, $log, AuthService,HelperService, DetailModalService,DialDataService)
    {

        $log.log('PipelineController');

        var that = this;

        that.filters = {};
        that.sortField = 'owner.primary.name.last';
        that.sortDir = '';
        that.viewUser;

        that.sortOn = function (f) {


            if(that.sortField == f)
            {
                that.sortDir = (that.sortDir == '-')?'':'-';
            } else {
                that.sortDir = '';
                that.sortField = f;
            }

        };

        that.showDialModal = function (lead) {
            DialDataService.setLead(lead);
        };

        var defaultFilters = {
            pipelineStatuses:['Paper App','Work Up','Ready to Pitch','Booked','Docs Out',
                'Docs In','Counselling In','Case Num Orderded','Appraisal Ordered','Appraisal In',
                'Submitted to Processing','Sent to Lender', 'Stipped','Clear to Close','Closed'],
            doNot:'all'
        };

        that.leads = [];

        that.showDetail = function (lead) {
            DetailModalService.setLead(lead);
        };

        $scope.slideTo = function (which) {
            var id = '#'+which;
            $('html,body').animate({scrollTop: $(id).offset().top},'slow');
        };

        $scope.bestColor = function (l) {
            if(l.colors.length)
            {
                for(i = (l.colors.length-1); i>=0;i--)
                {
                    var c = l.colors[i];
                    if(c.user == that.currentUser._id)
                    {
                        return c.name;
                        break;
                    }
                }
            } else {
                return null;
            }
        };
        var fetchUsers = function() {
            if(!HelperService.users)
            {
                $http.get(C1.api_url()+'api/users/simple').success(function(data) {
                    HelperService.users = data.users;
                    that.users = data.users;
                }).error(function(err) {
                    sweetAlert('Users List Error', 'error');
                });
            } else {
                that.users = HelperService.users;
            }
        };




        var fetchLeads = function() {
            C1.showLoader();
            that.filters.user = (that.viewUser) ? that.viewUser : AuthService.user;

            $http.post(C1.api_url()+'api/properties/all', {
                filters:that.filters,
                t:AuthService.token
            }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
                that.leads = data.leads;
                that.meta = data.meta;
                that.meta.totalPages = Math.ceil(that.meta.total/that.meta.perPage);
                C1.hideLoader();
                $.notify(that.meta.total+' pipeline loans found', 'info');
            }).error(function(error){
                sweetAlert('Access Denied', 'Invalid credentials', 'error');
                C1.hideLoader();
            });
        };

        $scope.usersComments = function () {
            return function (comment) {
                return comment.user == that.currentUser._id;
            };
        };

        $scope.getBucket = function (which) {
            return function (lead) {
                return lead.bucket == which;
            };
        };

        $scope.$on('detail-lead-turned-down', function () {
            var lead = DetailModalService.getLead();
            var i = that.leads.indexOf(lead);
            that.leads.splice(i,1);
            $rootScope.$broadcast('detail-to-close');
        });

        $scope.$on('detail-color-change', function () {
            var lead = DetailModalService.getLead();
            var i = that.leads.indexOf(lead);
            that.leads[i] = lead;

        });

        $scope.$on('detail-lead-claim', function () {
            var lead = DetailModalService.getLead();
            var i = that.leads.indexOf(lead);
            that.leads[i] = lead;
            $rootScope.$broadcast('detail-to-close');
        });

        $scope.$on('view-user-ready', function () {
            that.viewUser = HelperService.getViewUser();
            fetchLeads();
        });


        $scope.$on('Logged In', function (event, data) {
            $log.log('Logged In');
            that.states = HelperService.states();
            that.buckets = HelperService.lead_buckets();
            that.statuses = HelperService.lead_statuses();
            that.users = HelperService.users;
            that.currentUser = AuthService.user;
            that.filters = angular.copy(defaultFilters);
            if(!that.users)
            {
                fetchUsers();
            }
            fetchLeads();
            C1.setMenu('pipeline');
        });

        C1.showLoader();
        AuthService.loggedIn();

        $('.pipe-show').click(function () {
            var that = $(this);
            that.find('i').toggle();
            that.parent('h3').next('.panel').slideToggle();
        });
}]);

c1App.controller('SearchController', ['$scope','$http','$log','AuthService','HelperService','DetailModalService','DialDataService',function ($scope, $http, $log, AuthService,HelperService,DetailModalService,DialDataService) {

    $log.log('SearchController');

    var that = this;

    if(C1.page.search.leads.length)
    {
        that.leads = C1.page.search.leads;
        that.filter = C1.page.search.filter;
        that.sortField = C1.page.search.sortField;
        that.sortDir = C1.page.search.sortDir;
    } else {
        that.filter = {};
        that.sortField = 'owner.primary.name.last';
        that.sortDir = '';
    }

    that.showDialModal = function (lead) {
        DialDataService.setLead(lead);
    };

    that.sortOn = function (f) {


        if(that.sortField == f)
        {
            that.sortDir = (that.sortDir == '-')?'':'-';
        } else {
            that.sortDir = '';
            that.sortField = f;
        }

    };

    that.showDetail = function (lead) {
        DetailModalService.setLead(lead);
    };

    $scope.preferWhitePages = function (item) {
        if(item.source == 'Internal')
        {
            return 1;
        } else if(item.source == 'WhitePages')
        {
            return 2;
        } else {
            return 3;
        }
    };

    that.search = function () {
        var ok = false;
        if(that.filter.oldId)
        {
            ok = true;
        }
        if(that.filter.last && that.filter.last.length > 2)
        {
            ok = true;
        }
        if(that.filter.first && that.filter.first.length > 2)
        {
            ok = true;
        }
        if(that.filter.street && that.filter.street.length > 3)
        {
            ok = true;
        }
        if(that.filter.phone && that.filter.phone.length >= 10)
        {
            ok = true;
        }
        if(!ok)
        {
            sweetAlert('Search Warning', 'You must refine your search criteria', 'warning');
            return;
        }
        C1.showLoader();
        $http.post(C1.api_url()+'api/properties/search', {
            filter:that.filter,
            t:AuthService.token
        }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
            that.leads = data.leads;
            C1.hideLoader();
            if(that.leads.length > 500)
            {
                sweetAlert('Search Warning', 'Your search returned more than 500 results.  ONLY 500 are shown.  Please refine your search criteria.', 'warning');
            }
            C1.page.search.leads = that.leads;
            C1.page.search.filter = that.filter;
            C1.page.search.sortField = that.sortField;
            C1.page.search.sortDir = that.sortDir;
        }).error(function(error){
            sweetAlert('Search Error', 'Please try again.', 'error');
            C1.hideLoader();
        });
    };

    $scope.$on('Logged In', function (event, data) {
        $log.log('Logged In');
        C1.hideLoader();
        C1.setMenu('search');
    });

    C1.showLoader();
    AuthService.loggedIn();
}]);

c1App.controller('SourceModalController', ['$scope','$log','SourceModalService', 'HelperService',
    function ($scope, $log,SourceModalService, HelperService) {

        $log.log('SourceModalController');
        var that = this;
        that.sources = [];
        that.source = null;

        that.proceed = function () {
            if(!that.source) {
                sweetAlert('Oops', 'You must choose a source option.', 'error');
                return;
            }
            SourceModalService.setSource(that.source);
            $('#sourceModal').modal('hide');
        };

        $scope.$on('lead-source-data-ready', function () {
            that.sources = HelperService.sources();
            that.source = null;
            $('#sourceModal').modal('show');
        });


}]);

c1App.controller('TakeAppController', ['$scope','$rootScope','$log','$http','AuthService',
    'HelperService','TakeAppService','DetailModalService',
    function ($scope, $rootScope, $log,$http,AuthService,HelperService,TakeAppService,DetailModalService) {

        $log.log('TakeAppController');
        var that = this;
        var modal = null;
        that.lead = null;
        that.canSaveApp = false;
        that.app = {
            coborrower:{
                name:{},
                incomes:[],
                assets:[]
            },
            borrower:{
                name:{},
                incomes:[],
                assets:[]
            },
            address:{},
            home:{},
            loan:{},
            phones:[],
            emails:[]

        };

        that.hideModal = function () {
            that.lead = null;
            modal = $('#take-app').fadeOut('fast');
        };
        
        that.saveApp = function () {
            $http.post(C1.api_url()+'api/apps/save', {
                property:that.lead._id,
                user:AuthService.user,
                app:that.app,
                t:AuthService.token
            }, {headers: {'Content-Type': 'application/json'}}).success(function(data){
                this.app = data.app;
                if(data.property)
                {
                    that.lead = data.property;
                    DetailModalService.setLead(that.lead);
                }
                $.notify('Application Saved',"success");
            }).error(function(error){
                $.notify('Error saving application',"error");
            });  
        };

        that.print = function () {
            var url = C1.base_url + 'print/app/' + that.app._id;
            var win = window.open(url, '_blank');
            win.focus();
        }


        $scope.$on('take-app-data-ready', function () {
            that.lead = TakeAppService.getLead();
            var a = TakeAppService.getApp();
            if(a)
            {
                that.app = a;
                if(that.app.user == AuthService.user._id)
                {
                    that.canSaveApp = true;
                } else {
                    return false;
                }
            } else {
                that.canSaveApp = true;
                if(that.lead.owner.primary)
                {
                    that.app.borrower.name = that.lead.owner.primary.name;
                }
                if(that.lead.owner.secondary)
                {
                    that.app.coborrower.name = that.lead.owner.secondary.name;
                }
                if(that.lead.address)
                {
                    that.app.address = that.lead.address;
                }
                if(that.lead.mortgage.previousValue)
                {
                    that.app.home.oldValue = that.lead.mortgage.previousValue;
                }
                if(that.lead.mortgageValue.value)
                {
                    that.app.home.zestimate = that.lead.mortgageValue.value;
                }
                if(that.lead.mortgage.rate)
                {
                    that.app.loan.rate = that.lead.mortgage.rate;
                }
                if(that.lead.mortgage.rateType)
                {
                    that.app.loan.type = that.lead.mortgage.rateType;
                }
            }

            $('#take-app').fadeIn();
        });


}]);

c1App.controller('TopController', ['$scope','$log','AuthService','HelperService','$http', function ($scope, $log, AuthService, HelperService, $http) {

    $log.log('TopController');
    var that = this;
    that.seeAdmin = false;
    that.seeAllUsers = false;
    that.users = [];
    that.viewUser;

    that.switchViewUser = function () {
        HelperService.setViewUser(that.viewUser);
    }

    var fetchUsers = function() {
        if(!HelperService.users)
        {
            $http.get(C1.api_url()+'api/users/simple').success(function(data) {
                HelperService.users = data.users;
                that.users = data.users;
            }).error(function(err) {
                sweetAlert('Users List Error', 'error');
            });
        } else {
            that.users = HelperService.users;
        }
    };

    $scope.$on('Logged In', function (event, data) {
        that.currUser = AuthService.user;
        that.seeAdmin = ['Admin','Web Admin','Sales Manager','Team Manager'].indexOf(that.currUser.role) >= 0;
        that.seeAllUsers = ['Admin','Web Admin','Sales Manager'].indexOf(that.currUser.role) >= 0;
        if(that.seeAllUsers) {
            fetchUsers();
        }
    });
}]);
